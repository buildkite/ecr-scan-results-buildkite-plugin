#! /bin/bash
set -euo pipefail

# check all inputs exist and are valid
image_name_pattern="^[0-9]{12}\.dkr\.ecr\.[a-z][a-z1-9-]+\.amazonaws.com/[^:]+:[^:]+$"
count_pattern="^[0-9]+$"
if [ -n "${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_IMAGE_NAME}" ]
then
    IMAGE_NAME="${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_IMAGE_NAME}"
    if [[ ! "${IMAGE_NAME}" =~ ${image_name_pattern} ]]
    then
        annotation=$(printf "Error: value for IMAGE_NAME must be of the form AWS_ACCOUNT_ID.dkr.ecr.REGION.amazonaws.com/REPOSITORY_NAME:IMAGE_TAG with the text in capitals replaced with the appropriate values.\n")
        buildkite-agent annotate --style error --context exit_reason "${annotation}"
        exit 1
    fi
else
    annotation=$(printf "Error: no value for IMAGE_NAME configured.\n")
    buildkite-agent annotate --style error --context exit_reason "${annotation}"
    exit 1
fi
if [ -z "${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_MAX_CRITICALS+x}" ]
then
    MAX_CRITICALS="0"
else
    MAX_CRITICALS="${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_MAX_CRITICALS}"
    if [[ ! "${MAX_CRITICALS}" =~ ${count_pattern} ]]
    then
        annotation=$(printf "Error: value for MAX_CRITICALS must be an empty string or a string containing a non-negative integer.\n")
        buildkite-agent annotate --style error --context exit_reason "${annotation}"
        exit 1
    fi
fi
if [ -z "${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_MAX_HIGHS+x}" ]
then
    MAX_HIGHS="0"
else
    MAX_HIGHS="${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_MAX_HIGHS}"
    if [[ ! "${MAX_HIGHS}" =~ ${count_pattern} ]]
    then
        annotation=$(printf "Error: value for MAX_HIGHS must be an empty string or a string containing a non-negative integer.\n")
        buildkite-agent annotate --style error --context exit_reason "${annotation}"
        exit 1
    fi
fi
if [ -z "${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_IMAGE_LABEL+x}" ]
then
    IMAGE_LABEL=""
    IMAGE_LABEL_APP=""
else
    IMAGE_LABEL="${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_IMAGE_LABEL}"
    IMAGE_LABEL_APP="_${IMAGE_LABEL}"
    if [[ ! "${IMAGE_LABEL}" =~ [a-z][a-z0-9]* ]]
    then
        annotation=$(printf "Error: value for IMAGE_LABEL must be a string beginning with a lowercase letter and consisting of lower case letters and digits.\n")
        buildkite-agent annotate --style error --context exit_reason "${annotation}"
        exit 1
    fi
fi

# print input values
echo "IMAGE_NAME=${IMAGE_NAME}"
echo "MAX_CRITICALS=${MAX_CRITICALS}"
echo "MAX_HIGHS=${MAX_HIGHS}"
echo "IMAGE_LABEL=${IMAGE_LABEL}"

FULL_REPO_NAME="${IMAGE_NAME%:*}"
REPO_NAME="${FULL_REPO_NAME#*/}"
IMAGE_TAG="${IMAGE_NAME#*:}"
IFS="." read -ra dot_fields <<< "${IMAGE_NAME}"
REPOSITORY_ID="${dot_fields[0]}"
REGION="${dot_fields[3]}"

# poll until scan is COMPLETE or FAILED
scan_status="IN_PROGRESS"
i="0"
while [ "${scan_status}" = "IN_PROGRESS" ]  && [ "$i" -le "100" ]
do
    scan_status=$(aws ecr describe-image-scan-findings \
        --registry-id "${REPOSITORY_ID}" \
        --repository-name "${REPO_NAME}" \
        --image-ids imageTag="${IMAGE_TAG}" \
        --query "imageDetails[0].imageScanStatus.status" \
        --output text)
    sleep 3
    ((i=i+1))
done

# retrieve counts of criticals and highs or fail build if scan failed
case "${scan_status}" in
    "COMPLETE")
        criticals=$(aws ecr describe-image-scan-findings \
            --registry-id "${REPOSITORY_ID}" \
            --repository-name "${REPO_NAME}" \
            --image-ids imageTag="${IMAGE_TAG}" \
            --query "imageDetails[0].imageScanFindingsSummary.findingSeverityCounts.CRITICAL" \
            --output text)
        if [ "${criticals}" = "None" ]; then criticals="0"; fi
        highs=$(aws ecr describe-image-scan-findings \
            --registry-id "${REPOSITORY_ID}" \
            --repository-name "${REPO_NAME}" \
            --image-ids imageTag="${IMAGE_TAG}" \
            --query "imageDetails[0].imageScanFindingsSummary.findingSeverityCounts.HIGH" \
            --output text)
        if [ "${highs}" = "None" ]; then highs="0"; fi
        image_digest=$(aws ecr describe-image-scan-findings \
            --registry-id "${REPOSITORY_ID}" \
            --repository-name "${REPO_NAME}" \
            --image-ids imageTag="${IMAGE_TAG}" \
            --query "imageDetails[0].imageDigest" \
            --output text)
        ;;
    *)
        annotation=$(printf "Error: ECR vulnerability scan failed with status: %s\n" "${scan_status}")
        buildkite-agent annotate --style error --context "exit_reason${IMAGE_LABEL_APP}" "${annotation}"
        exit 1
        ;;
esac

# report results
vuln_url=$(printf "https://%s.console.aws.amazon.com/ecr/repositories/private/%s/%s/image/%s/scan-results/?region=%s" "${REGION}" "${REPOSITORY_ID}" "${REPO_NAME}" "${image_digest}" "${REGION}")

if [ -n "${IMAGE_LABEL}" ]
then
    image_number_annotation=$(printf "IMAGE_LABEL: \"%s\"<br />" "${IMAGE_LABEL}")
else
    image_number_annotation=""
fi
annotation=$(printf "%s%4d Critical vulnerabilities<br />%4d High vulnerabilities<br />Browse to <a href=\"%s\">image vulnerabilities</a> when logged into the appropriate AWS account with ecr:DescribeImages and ecr:DescribeImageScanFindings permissions" "${image_number_annotation}" "${criticals}" "${highs}" "${vuln_url}")
buildkite-agent annotate --style info --context "vuln_counts${IMAGE_LABEL_APP}" "${annotation}"

# check if thresholds are exceeded and if so fail build
fail_build="false"
annotation="${image_number_annotation}"
if [ -n "${MAX_CRITICALS}" ] && [ "${criticals}" -gt "${MAX_CRITICALS}" ]
then
    annotation=$(printf "%sNumber of critical vulnerabilities exceeds threshold MAX_CRITICALS=%d<br />" "${annotation}" "${MAX_CRITICALS}")
    fail_build="true"
fi
if  [ -n "${MAX_HIGHS}" ] && [ "${highs}" -gt "${MAX_HIGHS}" ]
then
    annotation=$(printf "%sNumber of high vulnerabilities exceeds threshold MAX_HIGHS=%d<br />" "${annotation}" "${MAX_HIGHS}")
    fail_build="true"
fi
if  [ "${fail_build}" = "true" ]
then
    buildkite-agent annotate --style error --context "fail_reason${IMAGE_LABEL_APP}" "${annotation}"
    exit 1
fi

#! /bin/bash
set -euo pipefail

function notify_error {
    exit_statement="
A failure occurred while attempting to retrieve ECR scan results.

This will not block CI, but please notify the ecr-scan-plugin maintainers of the issue.
"

    echo "^^^ +++"
    echo "${exit_statement}"

    # try to add an annotation, but skip if it doesn't work
    buildkite-agent annotate --style warning "${exit_statement}" || true

    exit 0
}

trap notify_error ERR

# check all inputs exist and are valid
image_name_pattern="^[0-9]{12}\.dkr\.ecr\.[a-z][a-z1-9-]+\.amazonaws.com/[^:]+:[^:]+$"
count_pattern="^[0-9]+$"
if [ -n "${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_IMAGE_NAME}" ]
then
    IMAGE_NAME="${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_IMAGE_NAME}"
    if [[ ! "${IMAGE_NAME}" =~ ${image_name_pattern} ]]
    then
        annotation=$(printf "Error: value for IMAGE_NAME must be of the form AWS_ACCOUNT_ID.dkr.ecr.REGION.amazonaws.com/REPOSITORY_NAME:IMAGE_TAG with the text in capitals replaced with the appropriate values.\n")
        buildkite-agent annotate --style error --context exit_reason "${annotation}"
        exit 1
    fi
else
    annotation=$(printf "Error: no value for IMAGE_NAME configured.\n")
    buildkite-agent annotate --style error --context exit_reason "${annotation}"
    exit 1
fi
if [ -z "${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_MAX_CRITICALS+x}" ]
then
    MAX_CRITICALS="0"
else
    MAX_CRITICALS="${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_MAX_CRITICALS}"
    if [[ ! "${MAX_CRITICALS}" =~ ${count_pattern} ]]
    then
        annotation=$(printf "Error: value for MAX_CRITICALS must be an empty string or a string containing a non-negative integer.\n")
        buildkite-agent annotate --style error --context exit_reason "${annotation}"
        exit 1
    fi
fi
if [ -z "${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_MAX_HIGHS+x}" ]
then
    MAX_HIGHS="0"
else
    MAX_HIGHS="${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_MAX_HIGHS}"
    if [[ ! "${MAX_HIGHS}" =~ ${count_pattern} ]]
    then
        annotation=$(printf "Error: value for MAX_HIGHS must be an empty string or a string containing a non-negative integer.\n")
        buildkite-agent annotate --style error --context exit_reason "${annotation}"
        exit 1
    fi
fi
if [ -z "${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_IMAGE_LABEL+x}" ]
then
    IMAGE_LABEL=""
    IMAGE_LABEL_APP=""
else
    IMAGE_LABEL="${BUILDKITE_PLUGIN_ECR_SCAN_RESULTS_IMAGE_LABEL}"
    IMAGE_LABEL_APP="_${IMAGE_LABEL}"
    if [[ ! "${IMAGE_LABEL}" =~ [a-z][a-z0-9]* ]]
    then
        annotation=$(printf "Error: value for IMAGE_LABEL must be a string beginning with a lowercase letter and consisting of lower case letters and digits.\n")
        buildkite-agent annotate --style error --context exit_reason "${annotation}"
        exit 1
    fi
fi

# print input values
echo "IMAGE_NAME=${IMAGE_NAME}"
echo "MAX_CRITICALS=${MAX_CRITICALS}"
echo "MAX_HIGHS=${MAX_HIGHS}"
echo "IMAGE_LABEL=${IMAGE_LABEL}"

FULL_REPO_NAME="${IMAGE_NAME%:*}"
REPO_NAME="${FULL_REPO_NAME#*/}"
IMAGE_TAG="${IMAGE_NAME#*:}"
IFS="." read -ra dot_fields <<< "${IMAGE_NAME}"
REPOSITORY_ID="${dot_fields[0]}"
REGION="${dot_fields[3]}"

echo "--- retrieving image digest"

cat << EOM
using inputs:
    FULL_REPO_NAME="${FULL_REPO_NAME}"
    REPO_NAME="${REPO_NAME}"
    IMAGE_TAG="${IMAGE_TAG}"
    REPOSITORY_ID="${REPOSITORY_ID}"
    REGION="${REGION}"

EOM

image_digest=$(aws ecr describe-images \
        --registry-id "${REPOSITORY_ID}" \
        --repository-name "${REPO_NAME}" \
        --image-id imageTag="${IMAGE_TAG}" \
        --query "imageDetails[0].imageDigest" \
        --output text)

image_identifier="imageDigest=${image_digest}"

echo "Using image digest: ${image_digest}"

echo "--- waiting for scan results to be available..."

# poll until scan is COMPLETE or FAILED
scan_status="IN_PROGRESS"
i="0"
while [ "${scan_status}" = "IN_PROGRESS" ]  && [ "$i" -le "20" ]
do
    echo "Poll attempt ${i}..."
    if ! scan_status="$(aws ecr describe-image-scan-findings \
        --registry-id "${REPOSITORY_ID}" \
        --repository-name "${REPO_NAME}" \
        --image-id "${image_identifier}" \
        --no-paginate \
        --query "imageScanStatus.status" \
        --output text 2>&1)"; then

        if grep -q "ScanNotFoundException" <<<"$scan_status"; then
            # if the scan isn't found, give it some more time to find the result
            echo "Scan results not yet present"
            scan_status="IN_PROGRESS"
        else
            echo 1>&2 "${scan_status}"
            notify_error
        fi
    fi

    # Give some time for the results to be available
    [ "$i" != "0" ] && sleep 3

    ((i=i+1))
done

if [[ "${scan_status}" == "UNSUPPORTED_IMAGE" ]]; then
    annotation=$(printf "Warning: ECR vulnerability scan does not support this image type: %s\n\nThe \`ecr-scan-results\` plugin will not supply useful results for this image: \`${IMAGE_NAME}\`" "${scan_status}")

    echo "^^^ +++"
    echo "${annotation}"

    buildkite-agent annotate --style warning --context "exit_reason${IMAGE_LABEL_APP}" "${annotation}"

    # not a blocking error
    exit 0
elif [[ "${scan_status}" != "COMPLETE" && "${scan_status}" != "ACTIVE" ]]; then
    annotation=$(printf "Error: ECR vulnerability scan failed with status: %s\n" "${scan_status}")

    echo "^^^ +++"
    echo "${annotation}"

    buildkite-agent annotate --style error --context "exit_reason${IMAGE_LABEL_APP}" "${annotation}"

    exit 1
fi

echo "scan complete"

echo "--- querying results..."

# retrieve counts of criticals and highs or fail build if scan failed
criticals=$(aws ecr describe-image-scan-findings \
    --registry-id "${REPOSITORY_ID}" \
    --repository-name "${REPO_NAME}" \
    --image-id "${image_identifier}" \
    --no-paginate \
    --query "imageScanFindings.findingSeverityCounts.CRITICAL" \
    --output text)
if [ "${criticals}" = "None" ]; then criticals="0"; fi

highs=$(aws ecr describe-image-scan-findings \
    --registry-id "${REPOSITORY_ID}" \
    --repository-name "${REPO_NAME}" \
    --image-id "${image_identifier}" \
    --no-paginate \
    --query "imageScanFindings.findingSeverityCounts.HIGH" \
    --output text)
if [ "${highs}" = "None" ]; then highs="0"; fi

# report results
vuln_url=$(printf "https://%s.console.aws.amazon.com/ecr/repositories/private/%s/%s/image/%s/scan-results/?region=%s" "${REGION}" "${REPOSITORY_ID}" "${REPO_NAME}" "${image_digest}" "${REGION}")

image_label_header="#### Vulnerability summary"
if [ -n "${IMAGE_LABEL}" ]
then
    image_label_header=$(printf "#### Vulnerability summary for \"%s\"\n\n" "${IMAGE_LABEL}")
fi

annotation_style="info"

# check if thresholds are exceeded and if so fail build
fail_build="false"
exceeded_criticals=""
exceeded_highs=""

if [ -n "${MAX_CRITICALS}" ] && [ "${criticals}" -gt "${MAX_CRITICALS}" ]
then
    exceeded_criticals=$(printf "**exceeds threshold %d**" "${MAX_CRITICALS}")
    annotation_style="error"
    fail_build="true"
fi

if  [ -n "${MAX_HIGHS}" ] && [ "${highs}" -gt "${MAX_HIGHS}" ]
then
    exceeded_highs=$(printf "**exceeds threshold %d**" "${MAX_HIGHS}")
    annotation_style="error"
    fail_build="true"
fi

annotation=$(cat << EOM
${image_label_header}

- Critical: ${criticals} ${exceeded_criticals}
- High: ${highs} ${exceeded_highs}

<a href="${vuln_url}">Vulnerability details are available</a> in the AWS console. This link will work
when logged into the appropriate AWS account (${REPOSITORY_ID}) with \`ecr:DescribeImages\`
and \`ecr:DescribeImageScanFindings\` permissions.
EOM
)

buildkite-agent annotate --style "${annotation_style}" --context "vuln_counts${IMAGE_LABEL_APP}" "${annotation}"

if  [ "${fail_build}" = "true" ]
then
    exit 1
fi
